{
  "version": 4,
  "terraform_version": "1.5.7",
  "serial": 80,
  "lineage": "ee985a95-8eb9-0e9a-8778-5f7783540110",
  "outputs": {
    "kube_config": {
      "value": "./config.yaml",
      "type": "string"
    },
    "password": {
      "value": "password123",
      "type": "string"
    },
    "public_ip": {
      "value": "150.109.159.35",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "data",
      "type": "tencentcloud_availability_zones_by_product",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1851109860",
            "include_unavailable": null,
            "name": null,
            "product": "cvm",
            "result_output_file": null,
            "zones": [
              {
                "description": "Hong Kong Zone 2",
                "id": "300002",
                "name": "ap-hongkong-2",
                "state": "AVAILABLE"
              },
              {
                "description": "Hong Kong Zone 3",
                "id": "300003",
                "name": "ap-hongkong-3",
                "state": "AVAILABLE"
              }
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "tencentcloud_images",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "363083216",
            "image_id": null,
            "image_name_regex": null,
            "image_type": [
              "PUBLIC_IMAGE"
            ],
            "images": [
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit",
                "image_id": "img-487zeit5",
                "image_name": "Ubuntu Server 22.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit",
                "image_id": "img-22trbn9x",
                "image_name": "Ubuntu Server 20.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_id": "img-j10l2cnz",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 20.04(arm64)",
                "image_id": "img-2eokmhf5",
                "image_name": "Ubuntu 20.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 20.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 18.04 LTS 64bit",
                "image_id": "img-pi0ii46r",
                "image_name": "Ubuntu Server 18.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 18.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 18.04(arm64)",
                "image_id": "img-9eh8c1p1",
                "image_name": "Ubuntu 18.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 18.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 64bit",
                "image_id": "img-pyqx34y1",
                "image_name": "Ubuntu Server 16.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 32bit",
                "image_id": "img-8u6dn6p1",
                "image_name": "Ubuntu Server 16.04 LTS 32bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 64bit",
                "image_id": "img-3wnd9xpl",
                "image_name": "Ubuntu Server 14.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 32bit",
                "image_id": "img-qpxvpujt",
                "image_name": "Ubuntu Server 14.04 LTS 32bit",
                "image_size": 50,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": false,
                "sync_percent": 0
              }
            ],
            "instance_type": null,
            "os_name": "ubuntu",
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "data",
      "type": "tencentcloud_instance_types",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "cpu_core_count": 4,
            "exclude_sold_out": false,
            "filter": [
              {
                "name": "instance-family",
                "values": [
                  "S5"
                ]
              }
            ],
            "gpu_core_count": null,
            "id": "885476296",
            "instance_types": [
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "PREPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-3",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "PREPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "POSTPAID_BY_HOUR",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-3",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "POSTPAID_BY_HOUR",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "SPOTPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-3",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "SPOTPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              }
            ],
            "memory_size": 8,
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "mode": "managed",
      "type": "helm_release",
      "name": "crossplane",
      "provider": "provider[\"registry.terraform.io/hashicorp/helm\"]",
      "instances": [
        {
          "schema_version": 1,
          "attributes": {
            "atomic": false,
            "chart": "crossplane",
            "cleanup_on_fail": false,
            "create_namespace": true,
            "dependency_update": false,
            "description": null,
            "devel": null,
            "disable_crd_hooks": false,
            "disable_openapi_validation": false,
            "disable_webhooks": false,
            "force_update": false,
            "id": "crossplane",
            "keyring": null,
            "lint": false,
            "manifest": null,
            "max_history": 0,
            "metadata": [
              {
                "app_version": "1.13.2",
                "chart": "crossplane",
                "name": "crossplane",
                "namespace": "crossplane-system",
                "revision": 1,
                "values": "{}",
                "version": "1.13.2"
              }
            ],
            "name": "crossplane",
            "namespace": "crossplane-system",
            "pass_credentials": false,
            "postrender": [],
            "recreate_pods": false,
            "render_subchart_notes": true,
            "replace": false,
            "repository": "https://charts.crossplane.io/stable",
            "repository_ca_file": null,
            "repository_cert_file": null,
            "repository_key_file": null,
            "repository_password": null,
            "repository_username": null,
            "reset_values": false,
            "reuse_values": false,
            "set": [],
            "set_list": [],
            "set_sensitive": [],
            "skip_crds": false,
            "status": "deployed",
            "timeout": 300,
            "values": null,
            "verify": false,
            "version": "1.13.2",
            "wait": true,
            "wait_for_jobs": false
          },
          "sensitive_attributes": [],
          "private": "eyJzY2hlbWFfdmVyc2lvbiI6IjEifQ==",
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "local_sensitive_file.kubeconfig",
            "module.k3s.data.http.k3s_installer",
            "module.k3s.data.http.k3s_version",
            "module.k3s.null_resource.agents_annotation",
            "module.k3s.null_resource.agents_drain",
            "module.k3s.null_resource.agents_install",
            "module.k3s.null_resource.agents_label",
            "module.k3s.null_resource.agents_taint",
            "module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.null_resource.kubernetes_ready",
            "module.k3s.null_resource.servers_annotation",
            "module.k3s.null_resource.servers_drain",
            "module.k3s.null_resource.servers_install",
            "module.k3s.null_resource.servers_label",
            "module.k3s.null_resource.servers_taint",
            "module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.tls_cert_request.master_user",
            "module.k3s.tls_locally_signed_cert.master_user",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_private_key.master_user",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_sensitive_file",
      "name": "kubeconfig",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\"apiVersion\": \"v1\"\n\"clusters\":\n- \"cluster\":\n    \"certificate-authority-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVVTZ0F3SUJBZ0lSQUxrY0VNK3cwYi85cldFeHY2VjFQSmd3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxelpYSjJaWEl0WTJFd0lCY05Nak14TURFek1ETXhNRFE1V2hnUApNakV5TXpFd01UUXdNekV3TkRsYU1COHhIVEFiQmdOVkJBTVRGR3QxWW1WeWJtVjBaWE10YzJWeWRtVnlMV05oCk1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFczY5Q1I2KzJWemE0UThrZS9nTHVKZ2ZQVWJoRk13ejEKZy9lTGlZRlY1a3pYYy81TmI0bGJGRlR4YkVaUlloclBFSk9JZWplSDVXa0tZdG95TjRZbXlGTnlXelA0ZUUvRQpPeGU2WTU4QlUxRS93OU0xK2RkTy9scXM0b1hEYWlZbm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEClZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVKzR4NHR0aG5icHplWFphYTJhajFvNG8rdWR3d0NnWUkKS29aSXpqMEVBd01EWndBd1pBSXdXVGFYQXZKcXAwU3QxZHJlRVF3eTI0WlBzd2xiNG1HeFhzMkdWNzhEbmVHWApMb1dDUG5xSDJTMWNGTFZ1Uk5tV0FqQkpFVVpCUGZoQ2Z6YlZiZEhTaWVrSC9Wc1RBcnR6NHdsMkVqVGNJajdBCktzbGdSc2V4anBLK3BrTW1hTlVlUCtrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n    \"server\": \"https://150.109.159.35:6443\"\n  \"name\": \"cluster.local\"\n\"contexts\":\n- \"context\":\n    \"cluster\": \"cluster.local\"\n    \"user\": \"master-user\"\n  \"name\": \"cluster.local\"\n\"current-context\": \"cluster.local\"\n\"kind\": \"Config\"\n\"preferences\": {}\n\"users\":\n- \"name\": \"master-user\"\n  \"user\":\n    \"client-certificate-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0VENDQVdpZ0F3SUJBZ0lSQUpJcGRRWldaVGh2VjBTU1NoMVZST0V3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxamJHbGxiblF0WTJFd0lCY05Nak14TURFek1ETXhNRFE1V2hnUApNakV5TXpFd01UUXdNekV3TkRsYU1DOHhGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1SUXdFZ1lEClZRUURFd3R0WVhOMFpYSXRkWE5sY2pCMk1CQUdCeXFHU000OUFnRUdCU3VCQkFBaUEySUFCSlE0SjRGM0lHMHQKRFZUZ1FsR2RsZVBKSExXcDlxTXg4WjdkbWRBNzM5RHpSTnRFUVZJWElrN201RGxGSmhIbitPNDhiRjJhNWR5Qwp1eVJrcTFqQnhNWjEweVl6SC9vTm5zTzJKWUtiTzlhci93NE9qWnU4eEFNY1FqWUp5ckplQ3FOV01GUXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVTZoRFZTalBEMWRpNVVWbGVtR1dYOGlQODZkd3dDZ1lJS29aSXpqMEVBd01EWndBdwpaQUl3RDlQQytjREhSc1lYV002UmFuNWNmaFI1dnFiUkIzelF3TEY1NFc2Y25wang3TTh0eUEreSt0OEMyK0FSCi9iYlVBakJyQ05kbjZpSWwrL2c2NklWZTJ1ZlYvbVNIRzQ1bE5hLyttUjdTcUZmVVhwZFpxNVJpNmVGS1VqSE0KOEFTNFAxQT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n    \"client-key-data\": \"LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRBN1JDcnJMQ1RJUmJOdnpwamExbWxiL2FpUHBoZDcrMEJhQWg4RVFQWWR5UDJnclJWcTBMMjkKQm9WTWRLSCt3bUtnQndZRks0RUVBQ0toWkFOaUFBU1VPQ2VCZHlCdExRMVU0RUpSblpYanlSeTFxZmFqTWZHZQozWm5RTzkvUTgwVGJSRUZTRnlKTzV1UTVSU1lSNS9qdVBHeGRtdVhjZ3Jza1pLdFl3Y1RHZGRNbU14LzZEWjdECnRpV0NtenZXcS84T0RvMmJ2TVFESEVJMkNjcXlYZ289Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K\"\n",
            "content_base64": null,
            "content_base64sha256": "ptg4ghD9p5DFJxA5saWgC5tp1GvtdoPYu/CEN76xSHw=",
            "content_base64sha512": "WQU9vTzmqm/SediSUnP6l1oWt9B5jCdUC2HzYEohAqkJ4ZIwk8hMYJiaxK5Q0eCnxu4B+VZed+a3PXOYjtkACQ==",
            "content_md5": "e9dedab6b3efe90c680fa9d5b65de6eb",
            "content_sha1": "733daa273d86edaa400a4b8c2aa62d1e34344438",
            "content_sha256": "a6d8388210fda790c5271039b1a5a00b9b69d46bed7683d8bbf08437beb1487c",
            "content_sha512": "59053dbd3ce6aa6fd279d8925273fa975a16b7d0798c27540b61f3604a2102a909e1923093c84c60989ac4ae50d1e0a7c6ee01f9565e77e6b73d73988ed90009",
            "directory_permission": "0700",
            "file_permission": "0700",
            "filename": "./config.yaml",
            "id": "733daa273d86edaa400a4b8c2aa62d1e34344438",
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "content"
              }
            ]
          ],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_cert_request.master_user",
            "module.k3s.tls_locally_signed_cert.master_user",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_private_key.master_user",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tencentcloud_instance",
      "name": "web",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocate_public_ip": true,
            "availability_zone": "ap-hongkong-2",
            "bandwidth_package_id": null,
            "cam_role_name": "",
            "cdh_host_id": null,
            "cdh_instance_type": null,
            "create_time": "2023-10-13T03:11:09Z",
            "data_disks": [],
            "disable_api_termination": false,
            "disable_monitor_service": false,
            "disable_security_service": false,
            "expired_time": "",
            "force_delete": false,
            "hostname": null,
            "id": "ins-56qtwnxo",
            "image_id": "img-487zeit5",
            "instance_charge_type": "SPOTPAID",
            "instance_charge_type_prepaid_period": null,
            "instance_charge_type_prepaid_renew_flag": "",
            "instance_count": null,
            "instance_name": "web server",
            "instance_status": "RUNNING",
            "instance_type": "S5.LARGE8",
            "internet_charge_type": "TRAFFIC_POSTPAID_BY_HOUR",
            "internet_max_bandwidth_out": 100,
            "keep_image_login": null,
            "key_ids": [
              ""
            ],
            "key_name": "",
            "orderly_security_groups": [
              "sg-ro1sktqp"
            ],
            "password": "password123",
            "placement_group_id": null,
            "private_ip": "172.19.0.9",
            "project_id": 0,
            "public_ip": "150.109.159.35",
            "running_flag": true,
            "security_groups": [
              "sg-ro1sktqp"
            ],
            "spot_instance_type": null,
            "spot_max_price": null,
            "stopped_mode": null,
            "subnet_id": "subnet-4bzgtcb3",
            "system_disk_id": "disk-mw963y9u",
            "system_disk_size": 50,
            "system_disk_type": "CLOUD_PREMIUM",
            "tags": null,
            "user_data": null,
            "user_data_raw": null,
            "vpc_id": "vpc-gnpqlmou"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tencentcloud_security_group",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "make it accessible for both production and stage ports",
            "id": "sg-ro1sktqp",
            "name": "tf-security-group",
            "project_id": 0,
            "tags": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "mode": "managed",
      "type": "tencentcloud_security_group_lite_rule",
      "name": "default",
      "provider": "provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "egress": [
              "ACCEPT#0.0.0.0/0#ALL#ALL"
            ],
            "id": "sg-ro1sktqp",
            "ingress": [
              "ACCEPT#0.0.0.0/0#22#TCP",
              "ACCEPT#0.0.0.0/0#6443#TCP"
            ],
            "security_group_id": "sg-ro1sktqp"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "tencentcloud_security_group.default"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n    else\n        HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n    fi\n    info \"Downloading hash ${HASH_URL}\"\n    download ${TMP_HASH} ${HASH_URL}\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 [ \"${VARIANT_ID:-}\" = sle-micro ]; then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ]; then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n    else\n        get_k3s_selinux_version\n        install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n    fi\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || [ -r /etc/fedora-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nfor bin in /var/lib/rancher/k3s/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w 'k3s/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/rancher/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nrm -rf /var/lib/rancher/k3s\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    if command -v iptables-save 1\u003e /dev/null \u0026\u0026 command -v iptables-restore 1\u003e /dev/null\n    then\n\t    $SUDO iptables-save | grep -v KUBE- | grep -iv flannel | $SUDO iptables-restore\n    fi\n    if command -v ip6tables-save 1\u003e /dev/null \u0026\u0026 command -v ip6tables-restore 1\u003e /dev/null\n    then\n\t    $SUDO ip6tables-save | grep -v KUBE- | grep -iv flannel | $SUDO ip6tables-restore\n    fi\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n",
            "ca_cert_pem": null,
            "id": "https://raw.githubusercontent.com/rancher/k3s/v1.28.2+k3s1/install.sh",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n    else\n        HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n    fi\n    info \"Downloading hash ${HASH_URL}\"\n    download ${TMP_HASH} ${HASH_URL}\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 [ \"${VARIANT_ID:-}\" = sle-micro ]; then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ]; then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n    else\n        get_k3s_selinux_version\n        install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n    fi\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || [ -r /etc/fedora-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nfor bin in /var/lib/rancher/k3s/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w 'k3s/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/rancher/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nrm -rf /var/lib/rancher/k3s\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    if command -v iptables-save 1\u003e /dev/null \u0026\u0026 command -v iptables-restore 1\u003e /dev/null\n    then\n\t    $SUDO iptables-save | grep -v KUBE- | grep -iv flannel | $SUDO iptables-restore\n    fi\n    if command -v ip6tables-save 1\u003e /dev/null \u0026\u0026 command -v ip6tables-restore 1\u003e /dev/null\n    then\n\t    $SUDO ip6tables-save | grep -v KUBE- | grep -iv flannel | $SUDO ip6tables-restore\n    fi\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n",
            "response_body_base64": "",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Access-Control-Allow-Origin": "*",
              "Cache-Control": "max-age=300",
              "Content-Security-Policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",
              "Content-Type": "text/plain; charset=utf-8",
              "Cross-Origin-Resource-Policy": "cross-origin",
              "Date": "Fri, 13 Oct 2023 03:10:46 GMT",
              "Etag": "W/\"c50ae858fdfe64eb55bd22365f8203a00c0d1a2a1108997e3db87d44bfe23af7\"",
              "Expires": "Fri, 13 Oct 2023 03:15:46 GMT",
              "Source-Age": "282",
              "Strict-Transport-Security": "max-age=31536000",
              "Vary": "Authorization,Accept-Encoding,Origin",
              "Via": "1.1 varnish",
              "X-Cache": "HIT",
              "X-Cache-Hits": "2",
              "X-Content-Type-Options": "nosniff",
              "X-Fastly-Request-Id": "b4644c11fb0806ff7286a236048fbd76b7c42b60",
              "X-Frame-Options": "deny",
              "X-Github-Request-Id": "B658:3F1FC2:138B6E:16569D:6528AAD8",
              "X-Served-By": "cache-nrt-rjtf7700050-NRT",
              "X-Timer": "S1697166647.804864,VS0,VE0",
              "X-Xss-Protection": "1; mode=block"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://raw.githubusercontent.com/rancher/k3s/v1.28.2+k3s1/install.sh"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_version",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channels\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.27.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.28.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.28.2-rc1+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latest\":\"v1.16.14-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latest\":\"v1.17.17-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.20-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.14+k3s1\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.9+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.6+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.2+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "ca_cert_pem": null,
            "id": "https://update.k3s.io/v1-release/channels",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channels\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.27.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.28.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.28.2-rc1+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latest\":\"v1.16.14-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latest\":\"v1.17.17-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.20-rc1+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.14+k3s1\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.9+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.6+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.2+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "response_body_base64": "eyJ0eXBlIjoiY29sbGVjdGlvbiIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscyJ9LCJhY3Rpb25zIjp7fSwicmVzb3VyY2VUeXBlIjoiY2hhbm5lbHMiLCJkYXRhIjpbeyJpZCI6InN0YWJsZSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3N0YWJsZSJ9LCJuYW1lIjoic3RhYmxlIiwibGF0ZXN0IjoidjEuMjcuNitrM3MxIn0seyJpZCI6ImxhdGVzdCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL2xhdGVzdCJ9LCJuYW1lIjoibGF0ZXN0IiwibGF0ZXN0IjoidjEuMjguMitrM3MxIiwibGF0ZXN0UmVnZXhwIjoiLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNVxcLjVcXCtrM3MxfHYxXFwuMjZcXC4wXFwrazNzMSkifSx7ImlkIjoidGVzdGluZyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3Rlc3RpbmcifSwibmFtZSI6InRlc3RpbmciLCJsYXRlc3QiOiJ2MS4yOC4yLXJjMStrM3MxIiwibGF0ZXN0UmVnZXhwIjoiLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xNiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE2In0sIm5hbWUiOiJ2MS4xNiIsImxhdGVzdCI6InYxLjE2LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE2XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4xNi10ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTYtdGVzdGluZyJ9LCJuYW1lIjoidjEuMTYtdGVzdGluZyIsImxhdGVzdCI6InYxLjE2LjE0LXJjMStrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xNlxcLlswLTldKi0oYWxwaGF8YmV0YXxyYykifSx7ImlkIjoidjEuMTciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNyJ9LCJuYW1lIjoidjEuMTciLCJsYXRlc3QiOiJ2MS4xNy4xNytrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xN1xcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifSx7ImlkIjoidjEuMTctdGVzdGluZyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE3LXRlc3RpbmcifSwibmFtZSI6InYxLjE3LXRlc3RpbmciLCJsYXRlc3QiOiJ2MS4xNy4xNy1yYzErazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMTdcXC5bMC05XSotKGFscGhhfGJldGF8cmMpIn0seyJpZCI6InYxLjE4IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTgifSwibmFtZSI6InYxLjE4IiwibGF0ZXN0IjoidjEuMTguMjArazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMThcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjE4LXRlc3RpbmciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xOC10ZXN0aW5nIn0sIm5hbWUiOiJ2MS4xOC10ZXN0aW5nIiwibGF0ZXN0IjoidjEuMTguMjAtcmMxK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE5In0sIm5hbWUiOiJ2MS4xOSIsImxhdGVzdCI6InYxLjE5LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIwIn0sIm5hbWUiOiJ2MS4yMCIsImxhdGVzdCI6InYxLjIwLjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIwXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIxIn0sIm5hbWUiOiJ2MS4yMSIsImxhdGVzdCI6InYxLjIxLjE0K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIxXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIyIn0sIm5hbWUiOiJ2MS4yMiIsImxhdGVzdCI6InYxLjIyLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIyXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIzIn0sIm5hbWUiOiJ2MS4yMyIsImxhdGVzdCI6InYxLjIzLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIzXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yNCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI0In0sIm5hbWUiOiJ2MS4yNCIsImxhdGVzdCI6InYxLjI0LjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI0XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNFxcLjlcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI1In0sIm5hbWUiOiJ2MS4yNSIsImxhdGVzdCI6InYxLjI1LjE0K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI1XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNVxcLjVcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI2In0sIm5hbWUiOiJ2MS4yNiIsImxhdGVzdCI6InYxLjI2LjkrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMjZcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiIoXlteK10rLXx2MVxcLjI2XFwuMFxcK2szczEpIn0seyJpZCI6InYxLjI3IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMjcifSwibmFtZSI6InYxLjI3IiwibGF0ZXN0IjoidjEuMjcuNitrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4yN1xcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifSx7ImlkIjoidjEuMjgiLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4yOCJ9LCJuYW1lIjoidjEuMjgiLCJsYXRlc3QiOiJ2MS4yOC4yK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9XX0K",
            "response_headers": {
              "Cf-Cache-Status": "DYNAMIC",
              "Cf-Ray": "8154642dda69e68a-HKG",
              "Content-Type": "application/json",
              "Date": "Fri, 13 Oct 2023 03:10:46 GMT",
              "Expires": "Wed 24 Feb 1982 18:42:00 GMT",
              "Nel": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
              "Report-To": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v3?s=s5uO6LUGDuWOLRooykjWjwk2qXJPguHTv%2FCX3OxFStVPi3bMr2lWlE9Cig0%2F%2BhkY2Id1YV%2BobE%2FArbx%2FBc21V%2BInmOQU03h9D8TIjmHKUK28k4I65VWSUkEjwYPaGRk%3D\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
              "Server": "cloudflare",
              "Strict-Transport-Security": "max-age=15552000; includeSubDomains; preload",
              "Vary": "Accept-Encoding",
              "X-Api-Schemas": "https://update.k3s.io/v1-release/schemas",
              "X-Content-Type-Options": "nosniff"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://update.k3s.io/v1-release/channels"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "k8s_ca_certificates_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "1314596882648931825",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "6063373936867112962",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "8409292095936899649",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "id": "2905850424551996244",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "id": "3719168355874814231",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "id": "4951740393759981544",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubernetes_ready",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "4586011852548655524",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.data.http.k3s_installer",
            "module.k3s.data.http.k3s_version",
            "module.k3s.null_resource.agents_annotation",
            "module.k3s.null_resource.agents_drain",
            "module.k3s.null_resource.agents_install",
            "module.k3s.null_resource.agents_label",
            "module.k3s.null_resource.agents_taint",
            "module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.null_resource.servers_annotation",
            "module.k3s.null_resource.servers_drain",
            "module.k3s.null_resource.servers_install",
            "module.k3s.null_resource.servers_label",
            "module.k3s.null_resource.servers_taint",
            "module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "k3s",
          "schema_version": 0,
          "attributes": {
            "id": "3481879798645691385",
            "triggers": {
              "connection_json": "eyJhZ2VudCI6bnVsbCwiYWdlbnRfaWRlbnRpdHkiOm51bGwsImJhc3Rpb25fY2VydGlmaWNhdGUiOm51bGwsImJhc3Rpb25faG9zdCI6bnVsbCwiYmFzdGlvbl9ob3N0X2tleSI6bnVsbCwiYmFzdGlvbl9wYXNzd29yZCI6bnVsbCwiYmFzdGlvbl9wb3J0IjpudWxsLCJiYXN0aW9uX3ByaXZhdGVfa2V5IjpudWxsLCJiYXN0aW9uX3VzZXIiOm51bGwsImNhY2VydCI6bnVsbCwiY2VydGlmaWNhdGUiOm51bGwsImhvc3QiOiIxNTAuMTA5LjE1OS4zNSIsImhvc3Rfa2V5IjpudWxsLCJodHRwcyI6bnVsbCwiaW5zZWN1cmUiOm51bGwsInBhc3N3b3JkIjoicGFzc3dvcmQxMjMiLCJwb3J0IjpudWxsLCJwcml2YXRlX2tleSI6bnVsbCwic2NyaXB0X3BhdGgiOm51bGwsInRpbWVvdXQiOiI2MHMiLCJ0eXBlIjoic3NoIiwidXNlX250bG0iOm51bGwsInVzZXIiOiJ1YnVudHUifQ==",
              "drain_timeout": "0s",
              "kubectl_cmd": "kubectl",
              "server_name": "k3s"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.data.http.k3s_installer",
            "module.k3s.data.http.k3s_version",
            "module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.null_resource.servers_install",
            "module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "k3s",
          "schema_version": 0,
          "attributes": {
            "id": "3402169977846305994",
            "triggers": {
              "on_immutable_changes": "7dae65ce7f7f5a8c5675cc256967bd7859002e26",
              "on_new_version": "v1.25.11+k3s1"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "data.tencentcloud_availability_zones_by_product.default",
            "data.tencentcloud_images.default",
            "data.tencentcloud_instance_types.default",
            "module.k3s.data.http.k3s_installer",
            "module.k3s.data.http.k3s_version",
            "module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "tencentcloud_instance.web",
            "tencentcloud_security_group.default",
            "tencentcloud_security_group_lite_rule.default"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "random_password",
      "name": "k3s_cluster_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 3,
          "attributes": {
            "bcrypt_hash": "$2a$10$qnxkO6eD2.2OpQS7Vnd1ReI.dQmld5MIKLS0M3azgM9kdl5JV0ZIu",
            "id": "none",
            "keepers": null,
            "length": 48,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "a28tjQOdoe0moDDTdvE2SeGuPyaxfJynVOkXgHXHAabyIx6H",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_cert_request",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASUOCeBdyBtLQ1U4EJR\nnZXjyRy1qfajMfGe3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXcgrskZKtY\nwcTGddMmMx/6DZ7DtiWCmzvWq/8ODo2bvMQDHEI2CcqyXgqgADAKBggqhkjOPQQD\nAwNoADBlAjB5Pvi0LrPB3VLjRufxv7ncfSPdKMgOFvfL91UpMLzjV65vSk4m0mEw\n7iDDjzzCszACMQCgeg59lOkG2nxouIHNQ+DEEDD4GBV7abkrOf4dOMbb6SGvPr7p\npvlHj9cKeZTysK4=\n-----END CERTIFICATE REQUEST-----\n",
            "dns_names": null,
            "id": "e2212e4b2e730447a24f9f069310b13fb44a5ba1",
            "ip_addresses": null,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA7RCrrLCTIRbNvzpja1mlb/aiPphd7+0BaAh8EQPYdyP2grRVq0L29\nBoVMdKH+wmKgBwYFK4EEACKhZANiAASUOCeBdyBtLQ1U4EJRnZXjyRy1qfajMfGe\n3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXcgrskZKtYwcTGddMmMx/6DZ7D\ntiWCmzvWq/8ODo2bvMQDHEI2CcqyXgo=\n-----END EC PRIVATE KEY-----\n",
            "subject": [
              {
                "common_name": "master-user",
                "country": null,
                "locality": null,
                "organization": "system:masters",
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.k3s.tls_private_key.master_user"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_locally_signed_cert",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "key_encipherment",
              "digital_signature",
              "client_auth"
            ],
            "ca_cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUOgAwIBAgIQbh8amnl0zwkbTwPLzEEu+zAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yMzEwMTMwMzEwNDlaGA8y\nMTIzMTAxNDAzMTA0OVowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT3AfDXErFvKoYDpgshLJoknRMLjKz7OoYE\nhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo6e1kJi3BDhKHmmDO\nVIjd8XIka6jFEJXwxY0GdE8ivsWXHE2jQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTqENVKM8PV2LlRWV6YZZfyI/zp3DAKBggq\nhkjOPQQDAwNoADBlAjEAh9ekqMWDK1+GbT5quDDbywC+9R3afKrVDXvZQXOja2Mo\nwV+Jx+8SLHYceTSNnA1OAjBwfWrg7nvX/wWIv+DJtN9Abp5zoRQecXYinucOjjH3\nQSg+bzDBUrnW7auHm4zYTOQ=\n-----END CERTIFICATE-----\n",
            "ca_key_algorithm": "ECDSA",
            "ca_private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAoYT723IzjtYzWoHwlk07oUnfTXleVq5JrwymmM/jEx4IrxU2YUKDF\n2Uk3CkFJcOigBwYFK4EEACKhZANiAAT3AfDXErFvKoYDpgshLJoknRMLjKz7OoYE\nhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo6e1kJi3BDhKHmmDO\nVIjd8XIka6jFEJXwxY0GdE8ivsWXHE0=\n-----END EC PRIVATE KEY-----\n",
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB4TCCAWigAwIBAgIRAJIpdQZWZThvV0SSSh1VROEwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjMxMDEzMDMxMDQ5WhgP\nMjEyMzEwMTQwMzEwNDlaMC8xFzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJzMRQwEgYD\nVQQDEwttYXN0ZXItdXNlcjB2MBAGByqGSM49AgEGBSuBBAAiA2IABJQ4J4F3IG0t\nDVTgQlGdlePJHLWp9qMx8Z7dmdA739DzRNtEQVIXIk7m5DlFJhHn+O48bF2a5dyC\nuyRkq1jBxMZ10yYzH/oNnsO2JYKbO9ar/w4OjZu8xAMcQjYJyrJeCqNWMFQwDgYD\nVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAU6hDVSjPD1di5UVlemGWX8iP86dwwCgYIKoZIzj0EAwMDZwAw\nZAIwD9PC+cDHRsYXWM6Ran5cfhR5vqbRB3zQwLF54W6cnpjx7M8tyA+y+t8C2+AR\n/bbUAjBrCNdn6iIl+/g66IVe2ufV/mSHG45lNa/+mR7SqFfUXpdZq5Ri6eFKUjHM\n8AS4P1A=\n-----END CERTIFICATE-----\n",
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAASUOCeBdyBtLQ1U4EJR\nnZXjyRy1qfajMfGe3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXcgrskZKtY\nwcTGddMmMx/6DZ7DtiWCmzvWq/8ODo2bvMQDHEI2CcqyXgqgADAKBggqhkjOPQQD\nAwNoADBlAjB5Pvi0LrPB3VLjRufxv7ncfSPdKMgOFvfL91UpMLzjV65vSk4m0mEw\n7iDDjzzCszACMQCgeg59lOkG2nxouIHNQ+DEEDD4GBV7abkrOf4dOMbb6SGvPr7p\npvlHj9cKeZTysK4=\n-----END CERTIFICATE REQUEST-----\n",
            "early_renewal_hours": 0,
            "id": "194282545099828326566567906705694606561",
            "is_ca_certificate": false,
            "ready_for_renewal": false,
            "set_subject_key_id": false,
            "validity_end_time": "2123-10-14T11:10:49.097441027+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2023-10-13T11:10:49.097441027+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "ca_private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.k3s.tls_cert_request.master_user",
            "module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.tls_private_key.master_user",
            "module.k3s.tls_self_signed_cert.kubernetes_ca_certs"
          ]
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "kubernetes_ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "a5b0f29f6ea3f0cb4cbe5bee5f4547a9195b2e68",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQT3AfDXErFvKoYDpgsh\nLJoknRMLjKz7OoYEhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo\n6e1kJi3BDhKHmmDOVIjd8XIka6jFEJXwxY0GdE8ivsWXHE0AAADIUfgwelH4MHoA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEE9wHw1xKxbyqG\nA6YLISyaJJ0TC4ys+zqGBIVFz//g14oGL2btg/G/JiOzcQiUbKNGXdX48dkL30RI\naw9ZaOntZCYtwQ4Sh5pgzlSI3fFyJGuoxRCV8MWNBnRPIr7FlxxNAAAAMChhPvbc\njOO1jNagfCWTTuhSd9NeV5WrkmvDKaYz+MTHgivFTZhQoMXZSTcKQUlw6AAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAoYT723IzjtYzWoHwlk07oUnfTXleVq5JrwymmM/jEx4IrxU2YUKDF\n2Uk3CkFJcOigBwYFK4EEACKhZANiAAT3AfDXErFvKoYDpgshLJoknRMLjKz7OoYE\nhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo6e1kJi3BDhKHmmDO\nVIjd8XIka6jFEJXwxY0GdE8ivsWXHE0=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAoYT723IzjtYzWoHwl\nk07oUnfTXleVq5JrwymmM/jEx4IrxU2YUKDF2Uk3CkFJcOihZANiAAT3AfDXErFv\nKoYDpgshLJoknRMLjKz7OoYEhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2Qvf\nREhrD1lo6e1kJi3BDhKHmmDOVIjd8XIka6jFEJXwxY0GdE8ivsWXHE0=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "b8:ed:52:29:64:95:78:9a:05:55:3e:d3:7e:24:85:9b",
            "public_key_fingerprint_sha256": "SHA256:KT9wuq7xtvyNJVhgYAkKkzkECIB0Bfrq6ihFbHVJEAs",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBPcB8NcSsW8qhgOmCyEsmiSdEwuMrPs6hgSFRc//4NeKBi9m7YPxvyYjs3EIlGyjRl3V+PHZC99ESGsPWWjp7WQmLcEOEoeaYM5UiN3xciRrqMUQlfDFjQZ0TyK+xZccTQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE9wHw1xKxbyqGA6YLISyaJJ0TC4ys+zqG\nBIVFz//g14oGL2btg/G/JiOzcQiUbKNGXdX48dkL30RIaw9ZaOntZCYtwQ4Sh5pg\nzlSI3fFyJGuoxRCV8MWNBnRPIr7FlxxN\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "d97f4b702c377ca48511d9615a161278db5b85ed",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQSzr0JHr7ZXNrhDyR7+\nAu4mB89RuEUzDPWD94uJgVXmTNdz/k1viVsUVPFsRlFiGs8Qk4h6N4flaQpi2jI3\nhibIU3JbM/h4T8Q7F7pjnwFTUT/D0zX5107+WqzihcNqJicAAADIEuHKKhLhyioA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEs69CR6+2Vza4\nQ8ke/gLuJgfPUbhFMwz1g/eLiYFV5kzXc/5Nb4lbFFTxbEZRYhrPEJOIejeH5WkK\nYtoyN4YmyFNyWzP4eE/EOxe6Y58BU1E/w9M1+ddO/lqs4oXDaiYnAAAAMCAaM+PU\n6Rl3RsUSfnIPbwVc7/SIJ/5WaQiHa5/FxJSGePaaq+DPiiSm9ZmHVousXAAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAgGjPj1OkZd0bFEn5yD28FXO/0iCf+VmkIh2ufxcSUhnj2mqvgz4ok\npvWZh1aLrFygBwYFK4EEACKhZANiAASzr0JHr7ZXNrhDyR7+Au4mB89RuEUzDPWD\n94uJgVXmTNdz/k1viVsUVPFsRlFiGs8Qk4h6N4flaQpi2jI3hibIU3JbM/h4T8Q7\nF7pjnwFTUT/D0zX5107+WqzihcNqJic=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAgGjPj1OkZd0bFEn5y\nD28FXO/0iCf+VmkIh2ufxcSUhnj2mqvgz4okpvWZh1aLrFyhZANiAASzr0JHr7ZX\nNrhDyR7+Au4mB89RuEUzDPWD94uJgVXmTNdz/k1viVsUVPFsRlFiGs8Qk4h6N4fl\naQpi2jI3hibIU3JbM/h4T8Q7F7pjnwFTUT/D0zX5107+WqzihcNqJic=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "7d:54:6e:6c:db:df:54:ed:e5:de:31:b2:b5:f1:0e:36",
            "public_key_fingerprint_sha256": "SHA256:fKJ6c4A4JBXKNcb+J0qvQ9oDpetch+kJKmoJ0I/h7oU",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBLOvQkevtlc2uEPJHv4C7iYHz1G4RTMM9YP3i4mBVeZM13P+TW+JWxRU8WxGUWIazxCTiHo3h+VpCmLaMjeGJshTclsz+HhPxDsXumOfAVNRP8PTNfnXTv5arOKFw2omJw==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEs69CR6+2Vza4Q8ke/gLuJgfPUbhFMwz1\ng/eLiYFV5kzXc/5Nb4lbFFTxbEZRYhrPEJOIejeH5WkKYtoyN4YmyFNyWzP4eE/E\nOxe6Y58BU1E/w9M1+ddO/lqs4oXDaiYn\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": []
        },
        {
          "index_key": 2,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "5d299a776762a0477cbb7db93f37e1ad810125c2",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQS8W3O9T4WEe/ZU9Bse\ntepXfSJ4zRirbXyUUQWbneFYc+I7hdlPQtJ44n1ccraK2PGxDk4+WUDcgG0Z5qQf\n01nfNj92breFY2Ynb1lLbuGPFoVLXdv5EG3drrheodwGMAEAAADIE7xufhO8bn4A\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEvFtzvU+FhHv2\nVPQbHrXqV30ieM0Yq218lFEFm53hWHPiO4XZT0LSeOJ9XHK2itjxsQ5OPllA3IBt\nGeakH9NZ3zY/dm63hWNmJ29ZS27hjxaFS13b+RBt3a64XqHcBjABAAAAMFHPh3Gy\nK7KQa6VeIgTbJ+OCb7NXjqXgCN9dpBUhfI1vF0rTdknOfQ1fGYVuG5hT/QAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBRz4dxsiuykGulXiIE2yfjgm+zV46l4AjfXaQVIXyNbxdK03ZJzn0N\nXxmFbhuYU/2gBwYFK4EEACKhZANiAAS8W3O9T4WEe/ZU9BsetepXfSJ4zRirbXyU\nUQWbneFYc+I7hdlPQtJ44n1ccraK2PGxDk4+WUDcgG0Z5qQf01nfNj92breFY2Yn\nb1lLbuGPFoVLXdv5EG3drrheodwGMAE=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBRz4dxsiuykGulXiIE\n2yfjgm+zV46l4AjfXaQVIXyNbxdK03ZJzn0NXxmFbhuYU/2hZANiAAS8W3O9T4WE\ne/ZU9BsetepXfSJ4zRirbXyUUQWbneFYc+I7hdlPQtJ44n1ccraK2PGxDk4+WUDc\ngG0Z5qQf01nfNj92breFY2Ynb1lLbuGPFoVLXdv5EG3drrheodwGMAE=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "58:1e:1a:0b:11:a0:56:c9:ff:7c:14:db:a6:dd:fa:db",
            "public_key_fingerprint_sha256": "SHA256:pnOFwaPY90dMBPpT167hiZHXChe0dzyxGlamVvWvifY",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBLxbc71PhYR79lT0Gx616ld9InjNGKttfJRRBZud4Vhz4juF2U9C0njifVxytorY8bEOTj5ZQNyAbRnmpB/TWd82P3Zut4VjZidvWUtu4Y8WhUtd2/kQbd2uuF6h3AYwAQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEvFtzvU+FhHv2VPQbHrXqV30ieM0Yq218\nlFEFm53hWHPiO4XZT0LSeOJ9XHK2itjxsQ5OPllA3IBtGeakH9NZ3zY/dm63hWNm\nJ29ZS27hjxaFS13b+RBt3a64XqHcBjAB\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "b2a65a6e55cacd1b6f74153fb3689360f647d631",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQSUOCeBdyBtLQ1U4EJR\nnZXjyRy1qfajMfGe3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXcgrskZKtY\nwcTGddMmMx/6DZ7DtiWCmzvWq/8ODo2bvMQDHEI2CcqyXgoAAADIJwducycHbnMA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEElDgngXcgbS0N\nVOBCUZ2V48kctan2ozHxnt2Z0Dvf0PNE20RBUhciTubkOUUmEef47jxsXZrl3IK7\nJGSrWMHExnXTJjMf+g2ew7Ylgps71qv/Dg6Nm7zEAxxCNgnKsl4KAAAAMDtEKuss\nJMhFs2/OmNrWaVv9qI+mF3v7QFoCHwRA9h3I/aCtFWrQvb0GhUx0of7CYgAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA7RCrrLCTIRbNvzpja1mlb/aiPphd7+0BaAh8EQPYdyP2grRVq0L29\nBoVMdKH+wmKgBwYFK4EEACKhZANiAASUOCeBdyBtLQ1U4EJRnZXjyRy1qfajMfGe\n3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXcgrskZKtYwcTGddMmMx/6DZ7D\ntiWCmzvWq/8ODo2bvMQDHEI2CcqyXgo=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDA7RCrrLCTIRbNvzpja\n1mlb/aiPphd7+0BaAh8EQPYdyP2grRVq0L29BoVMdKH+wmKhZANiAASUOCeBdyBt\nLQ1U4EJRnZXjyRy1qfajMfGe3ZnQO9/Q80TbREFSFyJO5uQ5RSYR5/juPGxdmuXc\ngrskZKtYwcTGddMmMx/6DZ7DtiWCmzvWq/8ODo2bvMQDHEI2CcqyXgo=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "62:28:12:a6:dc:e8:24:7f:1e:d9:60:e6:10:91:20:d8",
            "public_key_fingerprint_sha256": "SHA256:2cOC87G3yfNKNOauCDDBcftx6Bu4c9OIzKKFARMKHjA",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBJQ4J4F3IG0tDVTgQlGdlePJHLWp9qMx8Z7dmdA739DzRNtEQVIXIk7m5DlFJhHn+O48bF2a5dyCuyRkq1jBxMZ10yYzH/oNnsO2JYKbO9ar/w4OjZu8xAMcQjYJyrJeCg==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAElDgngXcgbS0NVOBCUZ2V48kctan2ozHx\nnt2Z0Dvf0PNE20RBUhciTubkOUUmEef47jxsXZrl3IK7JGSrWMHExnXTJjMf+g2e\nw7Ylgps71qv/Dg6Nm7zEAxxCNgnKsl4K\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s",
      "mode": "managed",
      "type": "tls_self_signed_cert",
      "name": "kubernetes_ca_certs",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": "0",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUOgAwIBAgIQbh8amnl0zwkbTwPLzEEu+zAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yMzEwMTMwMzEwNDlaGA8y\nMTIzMTAxNDAzMTA0OVowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT3AfDXErFvKoYDpgshLJoknRMLjKz7OoYE\nhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo6e1kJi3BDhKHmmDO\nVIjd8XIka6jFEJXwxY0GdE8ivsWXHE2jQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTqENVKM8PV2LlRWV6YZZfyI/zp3DAKBggq\nhkjOPQQDAwNoADBlAjEAh9ekqMWDK1+GbT5quDDbywC+9R3afKrVDXvZQXOja2Mo\nwV+Jx+8SLHYceTSNnA1OAjBwfWrg7nvX/wWIv+DJtN9Abp5zoRQecXYinucOjjH3\nQSg+bzDBUrnW7auHm4zYTOQ=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "146376580320330947097350730767279402747",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAoYT723IzjtYzWoHwlk07oUnfTXleVq5JrwymmM/jEx4IrxU2YUKDF\n2Uk3CkFJcOigBwYFK4EEACKhZANiAAT3AfDXErFvKoYDpgshLJoknRMLjKz7OoYE\nhUXP/+DXigYvZu2D8b8mI7NxCJRso0Zd1fjx2QvfREhrD1lo6e1kJi3BDhKHmmDO\nVIjd8XIka6jFEJXwxY0GdE8ivsWXHE0=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-client-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2123-10-14T11:10:49.042595126+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2023-10-13T11:10:49.042595126+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        },
        {
          "index_key": "1",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUSgAwIBAgIRALkcEM+w0b/9rWExv6V1PJgwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1zZXJ2ZXItY2EwIBcNMjMxMDEzMDMxMDQ5WhgP\nMjEyMzEwMTQwMzEwNDlaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtc2VydmVyLWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEs69CR6+2Vza4Q8ke/gLuJgfPUbhFMwz1\ng/eLiYFV5kzXc/5Nb4lbFFTxbEZRYhrPEJOIejeH5WkKYtoyN4YmyFNyWzP4eE/E\nOxe6Y58BU1E/w9M1+ddO/lqs4oXDaiYno0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQU+4x4tthnbpzeXZaa2aj1o4o+udwwCgYI\nKoZIzj0EAwMDZwAwZAIwWTaXAvJqp0St1dreEQwy24ZPswlb4mGxXs2GV78DneGX\nLoWCPnqH2S1cFLVuRNmWAjBJEUZBPfhCfzbVbdHSiekH/VsTArtz4wl2EjTcIj7A\nKslgRsexjpK+pkMmaNUeP+k=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "246052904505754644416621814953014541464",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAgGjPj1OkZd0bFEn5yD28FXO/0iCf+VmkIh2ufxcSUhnj2mqvgz4ok\npvWZh1aLrFygBwYFK4EEACKhZANiAASzr0JHr7ZXNrhDyR7+Au4mB89RuEUzDPWD\n94uJgVXmTNdz/k1viVsUVPFsRlFiGs8Qk4h6N4flaQpi2jI3hibIU3JbM/h4T8Q7\nF7pjnwFTUT/D0zX5107+WqzihcNqJic=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-server-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2123-10-14T11:10:49.030230763+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2023-10-13T11:10:49.030230763+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        },
        {
          "index_key": "2",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB1TCCAVugAwIBAgIQIQ//CEVxyWh1o8/7WxJzfDAKBggqhkjOPQQDAzArMSkw\nJwYDVQQDEyBrdWJlcm5ldGVzLXJlcXVlc3QtaGVhZGVyLWtleS1jYTAgFw0yMzEw\nMTMwMzEwNDlaGA8yMTIzMTAxNDAzMTA0OVowKzEpMCcGA1UEAxMga3ViZXJuZXRl\ncy1yZXF1ZXN0LWhlYWRlci1rZXktY2EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAS8\nW3O9T4WEe/ZU9BsetepXfSJ4zRirbXyUUQWbneFYc+I7hdlPQtJ44n1ccraK2PGx\nDk4+WUDcgG0Z5qQf01nfNj92breFY2Ynb1lLbuGPFoVLXdv5EG3drrheodwGMAGj\nQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQd\n0Qj0l6QvblJ15+PDNhPvy9ys5zAKBggqhkjOPQQDAwNoADBlAjAQY2Clv4iy4t7z\nKtdhviz4eFg4ytApKiZD36P1QbYwFFBYmc6GVxAymmtgTDwrVUcCMQCJAH6S+vcZ\nGIKkybZk58VdV5qjMxWcbsZ0cj6EDo4tZo6RnDsm8WJqWTbMkAbi5Bo=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "43947580983546502928216948636965303164",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBRz4dxsiuykGulXiIE2yfjgm+zV46l4AjfXaQVIXyNbxdK03ZJzn0N\nXxmFbhuYU/2gBwYFK4EEACKhZANiAAS8W3O9T4WEe/ZU9BsetepXfSJ4zRirbXyU\nUQWbneFYc+I7hdlPQtJ44n1ccraK2PGxDk4+WUDcgG0Z5qQf01nfNj92breFY2Yn\nb1lLbuGPFoVLXdv5EG3drrheodwGMAE=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-request-header-key-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2123-10-14T11:10:49.031494914+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2023-10-13T11:10:49.031494914+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.k3s.tls_private_key.kubernetes_ca"
          ]
        }
      ]
    }
  ],
  "check_results": null
}
